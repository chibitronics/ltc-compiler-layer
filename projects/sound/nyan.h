static const uint16_t nyan_intro[] = {
	#if 0
	NN(-12, N_HALF, 0),
	NN(-1, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(2, N_HALF, 0),
	NN(7, N_HALF, 0),
	NN(-1, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(7, N_QUARTER, 0),
	NN(9, N_QUARTER, 0),
	NN(11, N_QUARTER, 0),
	NN(9, N_QUARTER, 0),
	NN(6, N_QUARTER, 0),
	NN(7, N_HALF, 0),
	NN(2, N_HALF, 0),
	NN(-1, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(2, N_HALF, 0),
	//NN(7, N_HALF, 0),
	NN(9, N_QUARTER, 0),
	NN(6, N_QUARTER, 0),
	NN(7, N_QUARTER, 0),
	NN(9, N_QUARTER, 0),
	NN(12, N_QUARTER, 0),
	NN(11, N_QUARTER, 0),
	NN(12, N_QUARTER, 0),
	NN(9, N_QUARTER, 0),
	#endif
	NE(SET_NOTE_OFFSET, 59-24),
	NN(0, N_HALF, 0),
	NN(11, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(2, N_HALF, 0),
	NN(5, N_HALF, 0),
	NN(-8, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(5, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(-2, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(1, N_HALF, 0),
	NN(-5, N_HALF, 0),
	NN(-3, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(2, N_HALF, 0),
	NN(5, N_QUARTER, N_QUARTER),
	NN(2, 0, 0),
	NN(-3, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(2, N_QUARTER, N_QUARTER),
	NN(3, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),

	NE(PATTERN_JUMP_REL, 1),
};

static const uint16_t nyan_loop1[] = {
	NE(SET_NOTE_OFFSET, 61),
	NN(-7, N_HALF, 0),
	NN(2, N_QUARTER, N_QUARTER),
	NN(-7, N_QUARTER, 0),
	NN(2, N_HALF, 0),
	NN(-4, N_EIGHTH, N_EIGHTH),
	NN(3, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-2, N_QUARTER, N_QUARTER),
	NN(0, N_QUARTER, N_QUARTER),
	NN(2, N_HALF, 0),
	NN(1, N_QUARTER, N_QUARTER),
	NN(0, N_EIGHTH, N_EIGHTH),
	NN(-1, N_EIGHTH, N_EIGHTH),
	NN(-2, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(3, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(3, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(-2, N_QUARTER, 0),
	NN(4, N_HALF, 0),
	NN(3, N_QUARTER, N_QUARTER),
	NN(2, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(3, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-2, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(1, N_QUARTER, N_QUARTER),
	NN(-3, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(4, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(1, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-2, N_QUARTER, 0),
	NN(2, N_QUARTER, N_QUARTER),
	NN(-2, N_QUARTER, N_QUARTER),
	NN(2, N_QUARTER, N_QUARTER),
	//NE(PATTERN_REPEAT_COUNT, 2),
	NE(PATTERN_JUMP_REL, 1),
};

static const uint16_t nyan_loop2[] = {
	NE(SET_NOTE_OFFSET, 47),
	#if 0
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-10, N_QUARTER, 0),
	NN(-13, N_QUARTER, 0),
	NN(-12, N_QUARTER, 0),
	NN(-10, N_QUARTER, 0),
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-3, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-10, N_QUARTER, 0),
	NN(-5, N_HALF, 0),
	NN(-5, N_QUARTER, 0),
	NN(-6, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(-10, N_QUARTER, 0),
	NN(-8, N_QUARTER, 0),
	NN(-5, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(-1, N_QUARTER, 0),
	NN(0, N_QUARTER, 0),
	NN(2, N_QUARTER, 0),
	NN(-5, N_QUARTER, N_QUARTER),
	NN(-6, N_QUARTER, N_QUARTER),
	#endif
	NN(0, N_QUARTER, N_QUARTER),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(3, N_QUARTER, N_QUARTER),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(3, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(-2, N_QUARTER, 0),
NN(3, N_QUARTER, 0),
NN(-1, N_QUARTER, 0),
NN(1, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(-7, N_QUARTER, N_QUARTER),
NN(0, N_QUARTER, N_QUARTER),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(3, N_QUARTER, 0),
NN(-3, N_QUARTER, 0),
NN(8, N_QUARTER, 0),
NN(-1, N_QUARTER, 0),
NN(-2, N_QUARTER, 0),
NN(-2, N_QUARTER, 0),
NN(-5, N_QUARTER, 0),
NN(-3, N_QUARTER, 0),
NN(1, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(5, N_QUARTER, N_QUARTER),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(3, N_QUARTER, N_QUARTER),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(3, N_QUARTER, 0),
NN(0, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(-4, N_QUARTER, 0),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(-2, N_QUARTER, 0),
NN(5, N_HALF, 0),
NN(0, N_QUARTER, 0),
NN(-1, N_QUARTER, 0),
NN(1, N_QUARTER, 0),
NN(-5, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(3, N_QUARTER, 0),
NN(5, N_QUARTER, 0),
NN(-1, N_QUARTER, 0),
NN(1, N_QUARTER, 0),
NN(2, N_QUARTER, 0),
NN(-7, N_QUARTER, N_QUARTER),
NN(-1, N_QUARTER, N_QUARTER),
	NE(PATTERN_REPEAT_COUNT, 2),
	NE(PATTERN_JUMP_REL, -1),
};

#define SONG_PATTERNS nyan_intro, nyan_loop1, nyan_loop2
